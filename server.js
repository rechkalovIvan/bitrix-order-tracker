const express = require('express');
const fetch = require('node-fetch');
const app = express();
const PORT = process.env.PORT || 3000;

// üîê –í–µ–±—Ö—É–∫ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
const BITRIX_WEBHOOK_URL = 'https://–≤–∞—à-–¥–æ–º–µ–Ω.bitrix24.ru/rest/1/abc123xyz456def/';

// üß© –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.send(`
    <h1>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>
    <p>–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: <a href="/track?key=a7x9k2m5">/track?key=a7x9k2m5</a></p>
  `);
});

// üîç –ü–æ–∏—Å–∫ —Å–¥–µ–ª–∫–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É
app.get('/track', async (req, res) => {
    const { key } = req.query;

    if (!key) {
        return res.status(400).send('–ù–µ —É–∫–∞–∑–∞–Ω –∫–ª—é—á');
    }

    try {
        // üì• –ò—â–µ–º —Å–¥–µ–ª–∫—É –ø–æ –ø–æ–ª—é UF_UNIQUE_KEY
        const searchResponse = await fetch(BITRIX_WEBHOOK_URL + 'crm.deal.list', {
            method: 'POST',
            body: JSON.stringify({
                filter: { UF_UNIQUE_KEY: key },
                select: ['ID', 'TITLE', 'OPPORTUNITY', 'STAGE_ID', 'DATE_CREATE']
            }),
            headers: { 'Content-Type': 'application/json' }
        });

        const searchData = await searchResponse.json();

        if (searchData.error || searchData.result.length === 0) {
            return res.status(404).send('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π.');
        }

        const deal = searchData.result[0]; // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é) –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å–¥–µ–ª–∫—É

        // üñºÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        res.send(`
      <html>
      <head>
        <title>–í–∞—à –∑–∞–∫–∞–∑</title>
        <style>
          body { font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto; }
          h2 { color: #2c3e50; }
          p { font-size: 16px; }
          strong { color: #16a085; }
          hr { border: 1px solid #eee; }
          .footer { font-size: 12px; color: #7f8c8d; margin-top: 30px; }
        </style>
      </head>
      <body>
        <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</h2>
        <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${deal.TITLE || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</p>
        <p><strong>–°—É–º–º–∞:</strong> ${deal.OPPORTUNITY || '0'} ‚ÇΩ</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${formatStage(deal.STAGE_ID)}</p>
        <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> ${formatDate(deal.DATE_CREATE)}</p>
        <hr>
        <div class="footer">–ó–∞–∫–∞–∑ ‚Ññ${deal.ID}</div>

        <script>
          // üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
          setTimeout(() => location.reload(), 30000);
        </script>
      </body>
      </html>
    `);

    } catch (err) {
        console.error(err);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    }
});

// üõ† –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatStage(stageId) {
    const stages = {
        'NEW': '–ù–æ–≤—ã–π',
        'PREPARE': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
        'EXECUTING': '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è',
        'WON': '–£—Å–ø–µ—à–Ω–æ',
        'LOST': '–ü—Ä–æ–∏–≥—Ä–∞–Ω'
    };
    return stages[stageId] || stageId;
}

function formatDate(dateStr) {
    if (!dateStr) return '‚Äî';
    const date = new Date(dateStr);
    return date.toLocaleDateString('ru-RU');
}

app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
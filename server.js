const express = require('express');
const app = express();
const PORT = process.env.PORT || 10000; // Render –æ–∂–∏–¥–∞–µ—Ç –ø–æ—Ä—Ç 10000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// üöÄ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç node-fetch (ESM)
let fetch;
(async () => {
    try {
        fetch = (await import('node-fetch')).default;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ node-fetch:', err);
    }
})();

// üîê –í–µ–±—Ö—É–∫ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24 (—É—Å—Ç–∞–Ω–æ–≤–∏ –≤ Render –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è!)
const BITRIX_WEBHOOK_URL = process.env.BITRIX_WEBHOOK_URL;

// üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.send(`
    <h1>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–∏–¥–∞</h1>
    <p>–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: <a href="/track?key=a7x9k2m5">/track?key=a7x9k2m5</a></p>
  `);
});

// üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /track?key=...
app.get('/track', async (req, res) => {
    const { key } = req.query;

    if (!key) {
        return res.status(400).send('–ù–µ —É–∫–∞–∑–∞–Ω –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.');
    }

    if (!fetch) {
        return res.status(500).send('–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏.');
    }

    try {
        // üì• –ü–æ–∏—Å–∫ –ª–∏–¥–∞ –ø–æ UF_CRM_1754490207019
        const response = await fetch(BITRIX_WEBHOOK_URL + 'crm.lead.list', {
            method: 'POST',
            body: JSON.stringify({
                filter: { UF_CRM_1754490207019: key },
                select: [
                    'ID', 'TITLE', 'OPPORTUNITY', 'STATUS_ID', 'DATE_CREATE',
                    'UF_CRM_BEGINDATE',           // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞
                    'UF_CRM_1638818267',          // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (ID –∏–∑ —Å–ø–∏—Å–∫–∞)
                    'UF_CRM_5FB96D2488307',       // –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    'UF_CRM_1638818801'           // –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (ID –∏–∑ —Å–ø–∏—Å–∫–∞)
                ]
            }),
            headers: { 'Content-Type': 'application/json' }
        });

        const data = await response.json();

        if (!data.result || data.result.length === 0) {
            return res.status(404).send('–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π.');
        }

        const lead = data.result[0];

        // üõí –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ª–∏–¥–∞
        let productsHtml = '<h3>–¢–æ–≤–∞—Ä—ã:</h3><p>–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</p>';
        try {
            const productsResponse = await fetch(BITRIX_WEBHOOK_URL + 'crm.lead.productrows.get', {
                method: 'POST',
                body: JSON.stringify({ id: lead.ID }),
                headers: { 'Content-Type': 'application/json' }
            });

            const productsData = await productsResponse.json();
            const products = productsData.result || [];

            if (products.length > 0) {
                let productsTable = `
                    <table style="width: 100%; border-collapse: collapse; margin: 15px 0;">
                        <thead>
                            <tr style="background-color: #f2f2f2;">
                                <th style="border: 1px solid #ddd; padding: 8px; text-align: left;">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                <th style="border: 1px solid #ddd; padding: 8px; text-align: right;">–¶–µ–Ω–∞</th>
                                <th style="border: 1px solid #ddd; padding: 8px; text-align: center;">–ö–æ–ª-–≤–æ</th>
                                <th style="border: 1px solid #ddd; padding: 8px; text-align: right;">–°—É–º–º–∞</th>
                            </tr>
                        </thead>
                        <tbody>
                `;

                let total = 0;
                products.forEach(product => {
                    const price = parseFloat(product.PRICE || 0);
                    const quantity = parseFloat(product.QUANTITY || 0);
                    const sum = price * quantity;
                    total += sum;

                    productsTable += `
                        <tr>
                            <td style="border: 1px solid #ddd; padding: 8px;">${product.PRODUCT_NAME || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</td>
                            <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">${price.toFixed(2)} ‚ÇΩ</td>
                            <td style="border: 1px solid #ddd; padding: 8px; text-align: center;">${quantity}</td>
                            <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">${sum.toFixed(2)} ‚ÇΩ</td>
                        </tr>
                    `;
                });

                productsTable += `
                        <tr style="font-weight: bold;">
                            <td colspan="3" style="border: 1px solid #ddd; padding: 8px; text-align: right;">–ò—Ç–æ–≥–æ:</td>
                            <td style="border: 1px solid #ddd; padding: 8px; text-align: right;">${total.toFixed(2)} ‚ÇΩ</td>
                        </tr>
                        </tbody>
                    </table>
                `;

                productsHtml = `<h3>–¢–æ–≤–∞—Ä—ã:</h3>${productsTable}`;
            }
        } catch (productErr) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', productErr);
            productsHtml = '<h3>–¢–æ–≤–∞—Ä—ã:</h3><p style="color: red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</p>';
        }

        // üìÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        const formatDateField = (dateStr) => {
            if (!dateStr) return '‚Äî';
            try {
                const date = new Date(dateStr);
                return date.toLocaleDateString('ru-RU');
            } catch {
                return dateStr;
            }
        };

        // üïê –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ lists.field.get
        const getTimeListValues = async (fieldName) => {
            try {
                const listResponse = await fetch(BITRIX_WEBHOOK_URL + 'lists.field.get', {
                    method: 'POST',
                    body: JSON.stringify({
                        IBLOCK_TYPE_ID: 'crm_dynamic_lists',
                        IBLOCK_ID: 0,
                        FIELD_ID: fieldName
                    }),
                    headers: { 'Content-Type': 'application/json' }
                });

                const listData = await listResponse.json();

                if (listData.result && listData.result.LIST) {
                    const valueMap = {};
                    listData.result.LIST.forEach(item => {
                        valueMap[item.ID] = item.VALUE;
                    });
                    return valueMap;
                }

                return {};
            } catch (err) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ ${fieldName}:`, err);
                return {};
            }
        };

        // –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –ø–æ–ª–µ–π –≤—Ä–µ–º–µ–Ω–∏
        const timeStartMap = await getTimeListValues('UF_CRM_1638818267');
        const timeEndMap = await getTimeListValues('UF_CRM_1638818801');

        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        const timeStart = lead.UF_CRM_1638818267 ?
            (timeStartMap[lead.UF_CRM_1638818267] || lead.UF_CRM_1638818267) : '‚Äî';
        const timeEnd = lead.UF_CRM_1638818801 ?
            (timeEndMap[lead.UF_CRM_1638818801] || lead.UF_CRM_1638818801) : '‚Äî';

        // üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML –∫–ª–∏–µ–Ω—Ç—É
        res.send(`
      <html>
      <head>
        <title>–í–∞—à –ª–∏–¥</title>
        <style>
          body { font-family: Arial, sans-serif; padding: 20px; max-width: 800px; margin: 0 auto; }
          h2 { color: #2c3e50; }
          p { font-size: 16px; }
          strong { color: #16a085; }
          hr { border: 1px solid #eee; }
          .footer { font-size: 12px; color: #7f8c8d; margin-top: 30px; }
          .dates-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin: 15px 0; }
          .date-item { background: #f8f9fa; padding: 10px; border-radius: 4px; }
        </style>
      </head>
      <body>
        <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–¥–µ</h2>
        <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${lead.TITLE || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
        <p><strong>–°—É–º–º–∞:</strong> ${lead.OPPORTUNITY || '0'} ‚ÇΩ</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${formatStatus(lead.STATUS_ID)}</p>
        <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> ${formatDate(lead.DATE_CREATE)}</p>
        
        <div class="dates-grid">
            <div class="date-item">
                <strong>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</strong> ${formatDateField(lead.UF_CRM_BEGINDATE)}
            </div>
            <div class="date-item">
                <strong>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:</strong> ${timeStart}
            </div>
            <div class="date-item">
                <strong>–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</strong> ${formatDateField(lead.UF_CRM_5FB96D2488307)}
            </div>
            <div class="date-item">
                <strong>–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</strong> ${timeEnd}
            </div>
        </div>

        <hr>
        ${productsHtml}
        <hr>
        <div class="footer">–õ–∏–¥ ‚Ññ${lead.ID}</div>
        <script>
          // üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
          setTimeout(() => location.reload(), 30000);
        </script>
      </body>
      </html>
    `);

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', err);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// üõ† –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatStatus(statusId) {
    const map = {
        'NEW': 'üîπ –ù–æ–≤—ã–π',
        'IN_PROCESS': '‚è≥ –í —Ä–∞–±–æ—Ç–µ',
        'CONVERTED': '‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω',
        'JUNK': '‚ùå –°–ø–∞–º'
    };
    return map[statusId] || statusId;
}

function formatDate(dateStr) {
    if (!dateStr) return '‚Äî';
    const date = new Date(dateStr);
    return date.toLocaleDateString('ru-RU');
}

// ‚úÖ –í–ê–ñ–ù–û: –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ 0.0.0.0 –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º PORT –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
app.listen(PORT, '0.0.0.0', () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
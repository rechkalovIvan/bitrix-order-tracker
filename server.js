const express = require('express');
const app = express();
const PORT = process.env.PORT || 10000; // Render –æ–∂–∏–¥–∞–µ—Ç –ø–æ—Ä—Ç 10000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// üöÄ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç node-fetch (ESM)
let fetch;
(async () => {
    try {
        fetch = (await import('node-fetch')).default;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ node-fetch:', err);
    }
})();

// üîê –í–µ–±—Ö—É–∫ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24 (—É—Å—Ç–∞–Ω–æ–≤–∏ –≤ Render –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è!)
const BITRIX_WEBHOOK_URL = process.env.BITRIX_WEBHOOK_URL;

// üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.send(`
    <h1>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ª–∏–¥–∞</h1>
    <p>–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: <a href="/track?key=a7x9k2m5">/track?key=a7x9k2m5</a></p>
  `);
});

// üîç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /track?key=...
app.get('/track', async (req, res) => {
    const { key } = req.query;

    if (!key) {
        return res.status(400).send('–ù–µ —É–∫–∞–∑–∞–Ω –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.');
    }

    if (!fetch) {
        return res.status(500).send('–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏.');
    }

    try {
        // üì• –ü–æ–∏—Å–∫ –ª–∏–¥–∞ –ø–æ UF_CRM_1754490207019
        const response = await fetch(BITRIX_WEBHOOK_URL + 'crm.lead.list', {
            method: 'POST',
            body: JSON.stringify({
                filter: { UF_CRM_1754490207019: key },
                select: ['ID', 'TITLE', 'OPPORTUNITY', 'STATUS_ID', 'DATE_CREATE']
            }),
            headers: { 'Content-Type': 'application/json' }
        });

        const data = await response.json();

        if (!data.result || data.result.length === 0) {
            return res.status(404).send('–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π.');
        }

        const lead = data.result[0];

        // üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML –∫–ª–∏–µ–Ω—Ç—É
        res.send(`
      <html>
      <head>
        <title>–í–∞—à –ª–∏–¥</title>
        <style>
          body { font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto; }
          h2 { color: #2c3e50; }
          p { font-size: 16px; }
          strong { color: #16a085; }
          hr { border: 1px solid #eee; }
          .footer { font-size: 12px; color: #7f8c8d; margin-top: 30px; }
        </style>
      </head>
      <body>
        <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–¥–µ</h2>
        <p><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> ${lead.TITLE || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
        <p><strong>–°—É–º–º–∞:</strong> ${lead.OPPORTUNITY || '0'} ‚ÇΩ</p>
        <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${formatStatus(lead.STATUS_ID)}</p>
        <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> ${formatDate(lead.DATE_CREATE)}</p>
        <hr>
        <div class="footer">–õ–∏–¥ ‚Ññ${lead.ID}</div>
        <script>
          // üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
          setTimeout(() => location.reload(), 30000);
        </script>
      </body>
      </html>
    `);

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', err);
        res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// üõ† –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatStatus(statusId) {
    const map = {
        'NEW': 'üîπ –ù–æ–≤—ã–π',
        'IN_PROCESS': '‚è≥ –í —Ä–∞–±–æ—Ç–µ',
        'CONVERTED': '‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω',
        'JUNK': '‚ùå –°–ø–∞–º'
    };
    return map[statusId] || statusId;
}

function formatDate(dateStr) {
    if (!dateStr) return '‚Äî';
    const date = new Date(dateStr);
    return date.toLocaleDateString('ru-RU');
}

// ‚úÖ –í–ê–ñ–ù–û: –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ 0.0.0.0 –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º PORT –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
app.listen(PORT, '0.0.0.0', () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});